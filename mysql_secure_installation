#!/bin/bash
#выбор платы для установки WiringPi
echo -e "\033[1;33mВыберете вашу плату\033[0m"
echo -e "\033[0;36m1 - OrangePi\033[0m"
echo -e "\033[0;36m2 - Asus tinker board\033[0m"
echo -e "\033[0;36m3 - RaspberryPi\033[0m"
echo -e -n "\033[0;36mВаш выбор: \033[0m"
read vibor2
#установка Java и node.js
echo -e "\033[1;33mУстановка Java и node.js\033[0m"
echo -e "\033[0;36m1 - Установка только Java\033[0m"
echo -e "\033[0;36m2 - Установка Java и node.js\033[0m"
echo -e "\033[0;36m0 - не устанавливать\033[0m"
echo -e -n "\033[0;36mВаш выбор: \033[0m"
read vibor
#выбор платы для установки WiringPi
echo -e -n "\033[0;36mУстанавливать WiringPi? (у/n) \033[0m"
read vibor3
#выбор установки MySensors
echo -e -n "\033[0;36mУстанавливать MySensors? (y/n) \033[0m"
read vibor4
#выбор установки 433Utils
echo -e -n "\033[0;36mУстанавливать 433Utils? (y/n) \033[0m"
read vibor5
#выбор установки pi-switch-python
echo -e -n "\033[0;36mУстанавливать pi-switch-python? (y/n) \033[0m"
read vibor6
stty -echo
#задаем пароль root для MySQL
echo -e -n "\033[1;33mВведите пароль root для MariaDB (MySQL) > \033[0m"
read pass
stty -echo
#задаем пароль пользователя pi
echo -e -n "\033[1;33mБудет создан пользователь pi, задайте ему пароль > \033[0m"
read pass2
stty echo
password1=$pass
password2=$pass
reply='Y'
#добавляем пользователя
sudo useradd -m -d /home/pi pi -p $pass2
#настройки локали
sudo locale-gen en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
#добавляем репы webmin
echo "deb http://download.webmin.com/download/repository sarge contrib" | tee -a /etc/apt/sources.list
echo "deb http://webmin.mirror.somersettechsolutions.co.uk/repository sarge contrib" | tee -a /etc/apt/sources.list
sudo wget -q http://www.webmin.com/jcameron-key.asc
sudo apt-key add -qq jcameron-key.asc
#добавляем репы java
sudo apt-add-repository ppa:webupd8team/java -y
# Обновляем информацию о пакетах
sudo apt-get -qq update
# Устанавливаем необходимые пакеты
echo -n -e "\033[1;36mУстанавливаю необходимые утилиты и библиотеки... \033[0m"
sudo apt-get -qq install -y localepurge 
sudo apt-get -qq install -y ntpdate
sudo apt-get -qq install -y libusb-1.0-0 
sudo apt-get -qq install -y libusb-1.0-0-dev
sudo apt-get -qq install -y mc
sudo apt-get -qq install -y git 
sudo apt-get -qq install -y git-core
sudo apt-get -qq install -y dbconfig-mysql 
sudo apt-get -qq install -y i2c-tools 
sudo apt-get -qq install -y perl 
sudo apt-get -qq install -y libnet-ssleay-perl 
sudo apt-get -qq install -y openssl 
sudo apt-get -qq install -y libauthen-pam-perl 
sudo apt-get -qq install -y libpam-runtime 
sudo apt-get -qq install -y libio-pty-perl 
sudo apt-get -qq install -y libdigest-md5-perl 
sudo apt-get -qq install -y util-linux 
sudo apt-get -qq install -y unzip 
sudo apt-get -qq install -y zip 
sudo apt-get -qq install -y sunxi-tools
sudo apt-get -qq install -y python-dev 
sudo apt-get -qq install -y libboost-python-dev 
sudo apt-get -qq install -y python-pip
sudo apt-get -qq install -y lshw
echo -e "\033[1;32m установлено\033[0m"
echo -n -e "\033[0;36mУстанавливаю webmin... \033[0m"
sudo apt-get -qq install -y webmin
echo -e "\033[1;32m установлено\033[0m"
echo -n -e "\033[1;36mУстанавливаю MQTT сервер Mosquitto... \033[0m"
sudo apt-get -qq install -y mosquitto 
sudo apt-get -qq install -y mosquitto-clients
echo -e "\033[1;32m установлено\033[0m"
echo -n -e "\033[1;36mУстанавливаю owfs... \033[0m"
sudo apt-get -qq install -y owfs
echo -e "\033[1;32m установлено\033[0m"
echo -n -e "\033[1;36mУстанавливаю openvpn... \033[0m"
sudo apt-get -qq install -y openvpn
echo -e "\033[1;32m установлено\033[0m"
echo -n -e "\033[1;36mУстанавливаю web сервер Apache... \033[0m"
sudo apt-get -qq install -y apache2 
sudo apt-get -qq install -y apache2-bin 
sudo apt-get -qq install -y apache2-data 
sudo apt-get -qq install -y apache2-utils 
sudo apt-get -qq install -y libapache2-mod-php  
echo -e "\033[1;32m установлено\033[0m"
echo -n -e "\033[1;36mУстанавливаю php пакеты... \033[0m"
sudo apt-get -qq install -y php-bz2 
sudo apt-get -qq install -y php-cli 
sudo apt-get -qq install -y php-common 
sudo apt-get -qq install -y php-curl 
sudo apt-get -qq install -y php-gd 
sudo apt-get -qq install -y php-json 
sudo apt-get -qq install -y php-mbstring 
sudo apt-get -qq install -y php-mcrypt 
sudo apt-get -qq install -y php-mysql 
sudo apt-get -qq install -y php-opcache 
sudo apt-get -qq install -y php-readline
sudo apt-get -qq install -y php-xml 
sudo apt-get -qq install -y php-mysql 
sudo apt-get -qq install -y php-pear
sudo apt-get -qq install -y php-idn 
sudo apt-get -qq install -y php-imagick 
sudo apt-get -qq install -y php-imap 
sudo apt-get -qq install -y php-memcache 
sudo apt-get -qq install -y php-mhash 
sudo apt-get -qq install -y php-ming 
sudo apt-get -qq install -y php-ps 
sudo apt-get -qq install -y php-pspell 
sudo apt-get -qq install -y php-recode 
sudo apt-get -qq install -y php-snmp 
sudo apt-get -qq install -y php-tidy 
sudo apt-get -qq install -y php-xmlrpc 
sudo apt-get -qq install -y php-xsl 
sudo apt-get -qq install -y php-json
echo -e "\033[1;32m установлено\033[0m"
echo -n -e "\033[1;36mУстановка пакетов поддержки звука и видео (vlc, mpd, ffmpeg, alsa и т.п.)... \033[0m"
sudo apt-get -qq install -y vlc
sudo apt-get -qq install -y mpd  
sudo apt-get -qq install -y mplayer 
sudo apt-get -qq install -y ffmpeg 
sudo apt-get -qq install -y pulseaudio 
sudo apt-get -qq install -y alsa 
sudo apt-get -qq install -y alsa-utils 
sudo apt-get -qq install -y alsa-tools
sudo apt-get -qq install -y libav-tools
echo -n "\033[1;36mУстановка базы данных MariaDB... \033[0m"
sudo apt-get -qq install -y mariadb-server
sudo apt-get -qq install -y mariadb-client
echo -e "\033[1;32m установлено\033[0m"
#скрипт настройки базы данных ----------------------------------------------------------------------------------
#/usr/bin/mysql_secure_installation
# Copyright (C) 2002 MySQL AB and Jeremy Cole
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

config=".my.cnf.$$"
command=".mysql.$$"
mysql_client=""

trap "interrupt" 2

rootpass=""
echo_n=
echo_c=

YES=
NOROOTPW=

set_echo_compat() {
    case `echo "testing\c"`,`echo -n testing` in
	*c*,-n*) echo_n=   echo_c=     ;;
	*c*,*)   echo_n=-n echo_c=     ;;
	*)       echo_n=   echo_c='\c' ;;
    esac
}

prepare() {
    touch $config $command
    chmod 600 $config $command
}

find_mysql_client()
{
  for n in ./bin/mysql mysql
  do  
    $n --no-defaults --help > /dev/null 2>&1
    status=$?
    if test $status -eq 0
    then
      mysql_client=$n
      return
    fi  
  done
  echo "Can't find a 'mysql' client in PATH or ./bin"
  exit 1
}

do_query() {
    echo "$1" >$command
    #sed 's,^,> ,' < $command  # Debugging
    $mysql_client --defaults-file=$config <$command
    return $?
}

# Simple escape mechanism (\-escape any ' and \), suitable for two contexts:
# - single-quoted SQL strings
# - single-quoted option values on the right hand side of = in my.cnf
#
# These two contexts don't handle escapes identically.  SQL strings allow
# quoting any character (\C => C, for any C), but my.cnf parsing allows
# quoting only \, ' or ".  For example, password='a\b' quotes a 3-character
# string in my.cnf, but a 2-character string in SQL.
#
# This simple escape works correctly in both places.
basic_single_escape () {
    # The quoting on this sed command is a bit complex.  Single-quoted strings
    # don't allow *any* escape mechanism, so they cannot contain a single
    # quote.  The string sed gets (as argv[1]) is:  s/\(['\]\)/\\\1/g
    #
    # Inside a character class, \ and ' are not special, so the ['\] character
    # class is balanced and contains two characters.
    echo "$1" | sed 's/\(['"'"'\]\)/\\\1/g'
}

make_config() {
    echo "# mysql_secure_installation config file" >$config
    echo "[mysql]" >>$config
    echo "user=root" >>$config
    esc_pass=`basic_single_escape "$rootpass"`
    echo "password='$esc_pass'" >>$config
    #sed 's,^,> ,' < $config  # Debugging
}

get_root_password() {
    status=1
    while [ $status -eq 1 ]; do
	stty -echo
	echo $echo_n "Enter current password for root (enter for none): $echo_c"
	#read password
	echo
	stty echo
	if [ "x$password" = "x" ]; then
	    hadpass=0
	else
	    hadpass=1
	fi
	rootpass=$password
	make_config
	do_query ""
	status=$?
    done
    echo "OK, successfully used password, moving on..."
    echo
}

set_root_password() {
    stty -echo
    echo $echo_n "New password: $echo_c"
    #read password1
    echo
    echo $echo_n "Re-enter new password: $echo_c"
    #read password2
    echo
    stty echo

    if [ "$password1" != "$password2" ]; then
	echo "Sorry, passwords do not match."
	echo
	return 1
    fi

    if [ "$password1" = "" ]; then
	echo "Sorry, you can't use an empty password here."
	echo
	return 1
    fi

    esc_pass=`basic_single_escape "$password1"`
    do_query "UPDATE mysql.user SET Password=PASSWORD('$esc_pass') WHERE User='root';"
    if [ $? -eq 0 ]; then
	echo "Password updated successfully!"
	echo "Reloading privilege tables.."
	reload_privilege_tables || exit 1
	echo
	rootpass=$password1
	make_config
    else
	echo "Password update failed!"
	exit 1
    fi

    return 0
}

remove_anonymous_users() {
    do_query "DELETE FROM mysql.user WHERE User='';"
    if [ $? -eq 0 ]; then
	echo " ... Success!"
    else
	echo " ... Failed!"
	exit 1
    fi

    return 0
}

remove_remote_root() {
    do_query "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
    if [ $? -eq 0 ]; then
	echo " ... Success!"
    else
	echo " ... Failed!"
    fi
}

remove_test_database() {
    echo " - Dropping test database..."
    do_query "DROP DATABASE test;"
    if [ $? -eq 0 ]; then
	echo " ... Success!"
    else
	echo " ... Failed!  Not critical, keep moving..."
    fi

    echo " - Removing privileges on test database..."
    do_query "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'"
    if [ $? -eq 0 ]; then
	echo " ... Success!"
    else
	echo " ... Failed!  Not critical, keep moving..."
    fi

    return 0
}

reload_privilege_tables() {
    do_query "FLUSH PRIVILEGES;"
    if [ $? -eq 0 ]; then
	echo " ... Success!"
	return 0
    else
	echo " ... Failed!"
	return 1
    fi
}

interrupt() {
    echo
    echo "Aborting!"
    echo
    cleanup
    stty echo
    exit 1
}

cleanup() {
    echo "Cleaning up..."
    rm -f $config $command
}

print_help() {
cat << EOF
Usage: $0 [OPTION]
This program enables you to improve the security of your MySQL installation.
Without any OPTION it runs in standard (and recomended) way.

  -h, --help        display this help and exit
  -n, --norootpw    don't check and ask for setup of new root password
  -y, --yes         say 'yes' to all questios within root password
                    
Examples:
  $0
  $0 -y
  $0 -n -y
EOF

exit 0
}
# The actual script starts here

prepare
find_mysql_client
set_echo_compat

# Get params
while [ $# -ge 1 ] ; do
    case $1 in
        -h | --help) print_help;;
        -y | --yes)  YES=1;;
        -n | --norootpw)    NOROOTPW=1;;
        *)  echo "Error: Invalid option $1"; exit 1
    esac
    shift
done

echo
echo
echo
echo
echo "NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL"
echo "      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!"
echo
echo

if [ -z $NOROOTPW ]; then

    echo "In order to log into MySQL to secure it, we'll need the current"
    echo "password for the root user.  If you've just installed MySQL, and"
    echo "you haven't set the root password yet, the password will be blank,"
    echo "so you should just press enter here."
    echo

    get_root_password


    #
    # Set the root password
    #

    echo "Setting the root password ensures that nobody can log into the MySQL"
    echo "root user without the proper authorisation."
    echo

    if [ $hadpass -eq 0 ]; then
        echo $echo_n "Set root password? [Y/n] $echo_c"
    else
        echo "You already have a root password set, so you can safely answer 'n'."
        echo
        echo $echo_n "Change the root password? [Y/n] $echo_c"
    fi

    #read reply
    if [ "$reply" = "n" ]; then
        echo " ... skipping."
    else
        status=1
        while [ $status -eq 1 ]; do
    	set_root_password
    	status=$?
        done
    fi
    echo

fi  # end of NOROOTPW

#
# Remove anonymous users
#

echo "By default, a MySQL installation has an anonymous user, allowing anyone"
echo "to log into MySQL without having to have a user account created for"
echo "them.  This is intended only for testing, and to make the installation"
echo "go a bit smoother.  You should remove them before moving into a"
echo "production environment."
echo

if [ -z $YES ] ; then
    echo $echo_n "Remove anonymous users? [Y/n] $echo_c"
    #read reply
else
    reply='Y'
fi

if [ "$reply" = "n" ]; then
    echo " ... skipping."
else
    remove_anonymous_users
fi
echo


#
# Disallow remote root login
#

echo "Normally, root should only be allowed to connect from 'localhost'.  This"
echo "ensures that someone cannot guess at the root password from the network."
echo

if [ -z $YES ] ; then
    echo $echo_n "Disallow root login remotely? [Y/n] $echo_c"
    #read reply
else
    reply='Y'
fi

if [ "$reply" = "n" ]; then
    echo " ... skipping."
else
    remove_remote_root
fi
echo


#
# Remove test database
#

echo "By default, MySQL comes with a database named 'test' that anyone can"
echo "access.  This is also intended only for testing, and should be removed"
echo "before moving into a production environment."
echo

if [ -z $YES ] ; then
    echo $echo_n "Remove test database and access to it? [Y/n] $echo_c"
    #read reply
else
    reply='Y'
fi

if [ "$reply" = "n" ]; then
    echo " ... skipping."
else
    remove_test_database
fi
echo


#
# Reload privilege tables
#

echo "Reloading the privilege tables will ensure that all changes made so far"
echo "will take effect immediately."
echo

if [ -z $YES ] ; then
    echo $echo_n "Reload privilege tables now? [Y/n] $echo_c"
    #read reply
else
    reply='Y'
fi

if [ "$reply" = "n" ]; then
    echo " ... skipping."
else
    reload_privilege_tables
fi
echo

cleanup

echo
echo
echo
echo "All done!  If you've completed all of the above steps, your MySQL"
echo "installation should now be secure."
echo
echo "Thanks for using MySQL!"
echo
echo





#конец скрипта настройки базы данных ----------------------------------------------------------------------------------
#добавляем запуск vlc ower http на порту 7070
echo -n -e "\033[1;36mДобавляю запуск vlc http в сrontab: \033[0m"
echo "@reboot sudo -u www-data /usr/bin/vlc -I http --http-password 12345 --http-port 7070" | tee -a /var/spool/cron/crontabs/root
# Включаем мод rewrite для Apache
sudo a2enmod rewrite
#запускаем mosquitto в качестве сервиса
mosquitto -d
sudo systemctl enable mosquitto.service
case "$vibor" in
"1" )
echo -e "\033[1;36mУстанавливаю Java...\033[0m"
sudo apt-get -qq install -y oracle-java8-jdk
echo -e "\033[1;32m установлено\033[0m"
;;
"2" )
echo -n -e "\033[1;36mУстанавливаю Java...\033[0m"
sudo apt-get -qq install -y oracle-java8-jdk
echo -e "\033[1;32m установлено\033[0m"
#установка node.js из исходников
echo -e "\033[1;36mУстанавливаю node.js из исходников, можно попить чайку... литра 2 :-)\033[0m"
cd ~
wget -q https://nodejs.org/dist/index.tab
ver=$(grep -E -o "v([0-9]+\\.[0-9]+\\.[0-9]+)" ./index.tab | sed -n '1,1p')
echo -e "\033[1;36mпоследняя версия node.js \033[0;31m"$ver"\033[0m"
wget -q https://nodejs.org/dist/$ver/node-$ver.tar.gz 
tar -xf node-$ver.tar.gz 
rm node-$ver.tar.gz 
cd node-$ver
echo -n -e "\033[1;36mустановка продлиться продолжительное время (возможно 2-3 часа), подождите завершения...\033[0m"
./configure
make -s
make -s install
echo -e "\033[1;32m установлено\033[0m"
;;
esac

case "$vibor2" in
"1" )
#скачиваем WiringOP
echo -n -e "\033[1;36mУстановка WiringOP для OrangePi...\033[0m"
cd ~
git clone -q https://github.com/zhaolei/WiringOP.git -b h3 
cd WiringOP
chmod +x ./build
sudo ./build
echo -e "\033[1;32m WiringOP установлен\033[0m"
;;
"2" )
echo -e "\033[1;36mУстановка WiringPi для Asus tinker board\033[0m"
cd ~
wget -q http://dlcdnet.asus.com/pub/ASUS/mb/Linux/Tinker_Board_2GB/GPIO_API_for_C.ZIP
unzip -qq GPIO_API_for_C.ZIP -d WiringPi
cd ~/WiringPi
chmod +x ./build
./build
echo -e "\033[1;32m WiringPi установлен\033[0m"
;;
"3" )
echo -e "\033[1;36mУстановка WiringPi для RaspberryPi\033[0m"
cd ~
git clone -q git://git.drogon.net/wiringPi
cd ~/wiringPi
git pull origin
cd ~/wiringPi
chmod +x ./build
./build
echo -e "\033[1;32m WiringPi установлен\033[0m"
;;
esac


#MySensors
case "$vibor4" in
"y" )
sudo modprobe gpio-sunxi
echo "gpio-sunxi" >> /etc/modules
echo -n -e "\033[1;36mУстанавливаю Mysensors...\033[0m"
cd ~
git clone -q https://github.com/mysensors/MySensors.git
echo -e "\033[1;32m установлен\033[0m"
;;
esac
#433 Utils
case "$vibor5" in
"y" )
echo -e "\033[1;36mУстанавливаю 433 Utils...\033[0m"
cd ~
git clone -q --recursive git://github.com/ninjablocks/433Utils.git
echo -e "\033[1;32m установлен\033[0m"
;;
esac
#pi-switch-python
case "$vibor6" in
"y" )
echo -e "\033[1;36mУстанавливаю pi-switch-python...\033[0m"
cd ~
git clone -q https://github.com/lexruee/pi-switch-python.git
cd pi-switch-python
sudo python setup.py install
sudo tee ~/pi-switch-python/pyswitch.py << EOF
#!/usr/bin/python
#for python3:
#import requests
#for python2.7
import urllib
#---------------
from pi_switch import RCSwitchReceiver
import time

receiver = RCSwitchReceiver()
#порт приемника
receiver.enableReceive(7)

num = 0


while True:
      time.sleep( 0.1 )      
      if receiver.available():
         received_value = receiver.getReceivedValue()

         if received_value:
            num += 1
            #for python3
            #url = 'http://192.168.1.20/objects/?object=RCSwitch&op=set&p=code'
            #payload = {'v':received_value }
            #r = requests.get(url, params=payload)
            #print(r.url)
            #for python2.7
            rec_code = str(received_value)
            url = "http://localhost/objects/?script=RCSwitch&rcswitch=" + rec_code
            page = urllib.urlopen(url)
            text = page.read()
            page.close()
            #------------------
            print("Received[%s]:" % num)
            print(received_value)
            print("%s / %s bit" % (received_value, receiver.getReceivedBitlength()))
            print("Protocol: %s" % receiver.getReceivedProtocol())
            print("") 
            receiver.resetAvailable()
time.sleep (0.2)
EOF
echo -e "\033[1;32m pi-switch-python установлен\033[0m"
;;
esac
# Скачиваем систему MajorDoMo с GitHab
echo -e "\033[1;36mУстанавливаю систему \033[1;32mMajorDoMo... \033[0m"
cd ~
git clone -q https://github.com/sergejey/majordomo.git
# Переносим систему в директорию WEB-сервера
sudo cp -rp ~/majordomo/* /var/www
sudo cp -rp ~/majordomo/.htaccess /var/www
rmdir majordomo
#качаем phpmyadmin
echo -e "\033[1;36mУстанавливаю phpMyAdmin \033[0m"
cd ~
wget -q https://files.phpmyadmin.net/phpMyAdmin/4.7.7/phpMyAdmin-4.7.7-all-languages.tar.gz
tar -xf phpMyAdmin-4.7.7-all-languages.tar.gz
rm phpMyAdmin-4.7.7-all-languages.tar.gz
cp -a phpMyAdmin-4.7.7-all-languages /var/www/phpmyadmin
rmdir phpMyAdmin-4.7.7-all-languages
echo -e "\033[1;32mphpMyAdmin установлен\033[0m"
echo -e -n "\033[1;36mДелаю конфигурацию... \033[0m"
# Создаем конфигурационный файл для системы
sudo cp /var/www/config.php.sample /var/www/config.php
# Назначаем права и владельца для директории с системой
sudo chown -R www-data:www-data /var/www
find /var/www/ -type f -exec sudo chmod 0666 {} \;
find /var/www/ -type d -exec sudo chmod 0777 {} \;
# Добавляем пользователя www-data в группы
sudo usermod -a -G audio www-data
sudo usermod -a -G i2c www-data
sudo usermod -a -G tty www-data
sudo usermod -a -G dialup www-data
#asound.conf для OrangePiPC
case "$vibor2" in
"1" )
sudo tee /etc/asound.conf << EOF
pcm.!default {
        type plug
        slave.pcm "dmixer"
}

pcm.dmixer  {
        type dmix
        ipc_key 1024
        ipc_perm 0666
        slave {
                pcm "hw:0,0"
                period_time 0
                period_size 1024
                buffer_size 4096
                rate 44100
        }
}
ctl.dmixer {
        type hw
        card 0
}
EOF
;;
esac
# Создаем описание сервиса для запуска основного цикла системы
sudo tee /etc/init.d/majordomo << EOF
#!/bin/sh
### BEGIN INIT INFO
# Provides: SmartLiving
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

dir="/var/www/"
user="root"
cmd="php /var/www/cycle.php"
name=\`basename \$0\`
pid_file="/var/run/\$name.pid"
stdout_log="/var/log/\$name.log"
stderr_log="/var/log/\$name.err"
get_pid() {
    cat "\$pid_file"
}
is_running() {
    [ -f "\$pid_file" ] && ps \`get_pid\` > /dev/null 2>&1
}
case "\$1" in
    start)
    if is_running; then
        echo "Already started"
    else
        echo "Starting \$name"
        cd "\$dir"
(while true; do
    sudo -u "\$user" \$cmd
done)>> "\$stdout_log" 2>> "\$stderr_log" &

        echo \$! > "\$pid_file"
        if ! is_running; then
            echo "Unable to start, see \$stdout_log and \$stderr_log"
            exit 1
        fi
    fi
    ;;
    stop)
    if is_running; then
        echo -n "Stopping \$name.."
        kill \`get_pid\`
        sudo killall php
        for i in {1..10}
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "Stopped"
            if [ -f "\$pid_file" ]; then
                rm "\$pid_file"
            fi
        fi
    else
        echo "Not running"
        sudo killall php
    fi
    ;;
    restart)
    \$0 stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    \$0 start
    ;;
    status)
    if is_running; then
        echo "Running"
    else
        echo "Stopped"
        exit 1
    fi
    ;;
    *)
    echo "Usage: \$0 {start|stop|restart|status}"
    exit 1
    ;;
esac
exit 0
EOF
echo -e "\033[1;32mготово\033[0m"
# Добавляем главный цикл системы в автозагрузку
sudo chmod 0755 /etc/init.d/majordomo
sudo update-rc.d majordomo defaults
echo -e "\033[1;36mСистема \033[1;32mMajorDoMo \033[0;36mскопирована, добавляю базу данных...\033[0m "
# Настраиваем подключение к БД для системы
sudo sed -i "/DB_USER/s/'root'/'pi'/" /var/www/config.php
sudo sed -i "/DB_PASSWORD/s/''/'$pass2'/" /var/www/config.php
# Создаем БД db_terminal и импортируем содержимое из дистрибутива
mysql -u root -p$pass << EOF
CREATE DATABASE db_terminal;
USE db_terminal;
EOF
#добавляем mysql пользователя и даем ему привилегии
mysql -u root -p$pass << EOF
CREATE USER 'pi'@'localhost' IDENTIFIED BY '$pass2';
GRANT ALL PRIVILEGES ON * . * TO 'pi'@'localhost';
FLUSH PRIVILEGES;
EOF
mysql -u root -p$pass db_terminal < /var/www/db_terminal.sql
echo -e "\033[1;36mСистема \033[1;32mMajorDoMo \033[1;36mустановлена\033[0m "
# Отключаем режим "Strict mode" для MySQL (для избавления от наследственных ошибок)
echo -e "\033[1;36mНастраиваю кое какие файлы... \033[0m "
sudo tee /etc/mysql/conf.d/disable_strict_mode.cnf << EOF
[mysqld]
sql_mode=IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
EOF
# Настраиваем Apache
sudo sed -i 's/None/All/g' /etc/apache2/apache2.conf
echo "ServerName localhost" | sudo tee -a /etc/apache2/apache2.conf
sudo sed -i 's/\/html//' /etc/apache2/sites-available/000-default.conf
# Настраиваем PHP для Apache
sudo sed -i '/short_open_tag/s/Off/On/' /etc/php/7.0/apache2/php.ini
sudo sed -i '/error_reporting/s/~E_DEPRECATED & ~E_STRICT/~E_NOTICE/' /etc/php/7.0/apache2/php.ini
sudo sed -i '/max_execution_time/s/30/90/' /etc/php/7.0/apache2/php.ini
sudo sed -i '/max_input_time/s/60/180/' /etc/php/7.0/apache2/php.ini
sudo sed -i '/post_max_size/s/8/200/' /etc/php/7.0/apache2/php.ini
sudo sed -i '/upload_max_filesize/s/2/50/' /etc/php/7.0/apache2/php.ini
sudo sed -i '/max_file_uploads/s/20/150/' /etc/php/7.0/apache2/php.ini
# Настраиваем PHP для коммандной строки
sudo sed -i '/short_open_tag/s/Off/On/' /etc/php/7.0/cli/php.ini
sudo sed -i '/error_reporting/s/~E_DEPRECATED & ~E_STRICT/~E_NOTICE/' /etc/php/7.0/cli/php.ini
# Обновляем и перезапускаем службы
sudo systemctl daemon-reload
sudo apache2ctl restart
sudo service mysql restart
# Запускаем основной цикл
sudo service majordomo start
#устанавливаем модули

#обновляем систему
wget -q http://localhost/modules/saverestore/update_iframe.php
wget -q http://localhost/modules/market/update_iframe.php?mode2=update_all
echo -e "\033[1;36mСистема \033[1;32mMajorDoMo \033[1;36mнастроена полностью\033[0m "




#оптимизация работы с базой данных
sudo service majordomo stop
sudo service mysql stop
cd /var/www
mkdir database_backup
chmod 0777 database_backup
cp /var/www/scripts/periodical_db_save.php /var/www/scripts/cycle_db_save.php
sudo swapoff --all
sudo apt-get remove dphys-swapfile
sudo tee /etc/init.d/prepare-dirs << EOF
#!/bin/bash
### BEGIN INIT INFO
# Provides:          prepare-dirs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Required-Start:
# Required-Stop:
# Short-Description: Create needed directories on /var/log/ for tmpfs at startup
# Description:       Create needed directories on /var/log/ for tmpfs at startup
### END INIT INFO

DIR[0]=/var/log/apache2
DIR[1]=/var/log/cups
DIR[2]=/var/log/apt
DIR[3]=/var/log/ConsoleKit
DIR[4]=/var/log/fsck
DIR[5]=/var/log/mysql
DIR[6]=/var/log/news
DIR[7]=/var/log/ntpstats
DIR[8]=/var/log/samba
DIR[9]=/var/log/lastlog
DIR[10]=/var/log/exim
DIR[11]=/var/log/watchdog
DIR[12]=/tmp/mysql
DIR[13]=/var/www/cached
DIR[14]=/var/www/debmes
DIR[15]=/var/log/mpd
DIR[16]=/var/www/cached/urls
DIR[17]=/var/www/cached/voice
case "\${1:-''}" in
  start)
        typeset -i i=0 max=\${#DIR[*]}
        while (( i < max ))
        do
                mkdir  \${DIR[\$i]}
                chmod 777 \${DIR[\$i]}
                i=i+1
        done
        # set rights
        chown pi:pi \${DIR[0]}
        cp -R /var/lib/mysql/* /tmp/mysql/
        chown -Rf mysql:mysql /tmp/mysql/*
        chown mysql:mysql /tmp/mysql
    ;;
  stop)
    ;;
  restart)
   ;;
  reload|force-reload)
   ;;
  status)
   ;;
  *)
   echo "Usage: \$SELF start"
   exit 1
   ;;
esac
EOF
sudo chmod 755 /etc/init.d/prepare-dirs
sudo update-rc.d prepare-dirs defaults 01 99
echo "tmpfs /tmp tmpfs defaults,noatime,nosuid,size=250m 0 0" | tee -a /etc/fstab
echo "tmpfs /var/tmp tmpfs defaults,noatime,nosuid,size=200m 0 0" | tee -a /etc/fstab
echo "#tmpfs /var/run tmpfs defaults,noatime,nosuid,mode=0755,size=2m 0 0" | tee -a /etc/fstab
echo "tmpfs   /var/log                tmpfs   size=20M,defaults,noatime,mode=0755 0 0 " | tee -a /etc/fstab
echo "tmpfs   /var/cache/apt/archives tmpfs   size=200M,defaults,noexec,nosuid,nodev,mode=0755 0 0" | tee -a /etc/fstab
echo "tmpfs   /var/www/cached                tmpfs   size=100M,defaults,noatime,mode=0755 0 0 " | tee -a /etc/fstab
